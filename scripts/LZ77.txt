#Código codificador
def LZ77en(string, e, d):
    Ment = 2 ** e
    Mdes = 2 ** d
    
    if(Ment > Mdes):
        return "Error: Ventana deslizante mayor a la ventana de entrada."
    
    if(Mdes + Ment > len(string)):
        return "Error: Longitudes de las ventanas deslizante y de entrada mayor que la del texto."
    
    output_string = string[:Mdes]
    mdstart = 1
    if(string[mdstart] == string[mdstart + Mdes]):
        output_string += string[mdstart:mdstart + Mdes] + "1" + str(bin(count))[3:] +  str(bin(Mdes))[3:]
    else:
        output_string += "0" + string[mdstart + Mdes]
    while(mdstart + Mdes < len(string)):
        dis = 0
        match = False
        while(dis < Mdes and not match):
            count = 0
            while(count < Ment and dis + count < Mdes and count < len(string) - mdstart - Mdes and string[mdstart + dis + count] == string[mdstart + Mdes + count]):
                count += 1
            match = count > 1
            dis += 1
        if(count > 1):
            output_string += "1" + str(toBinary(count, e - 1)) +  str(toBinary(Mdes - dis + 1, d - 1))
            mdstart += Mdes
        else:
            output_string += "0" + string[mdstart + Mdes]
        mdstart += max(1, count)
    output_string += string[mdstart:]
    return output_string

#Código descodificador
def LZ77de(string, e, d):
    Ment = 2 ** e
    Mdes = 2 ** d
    
    if(Ment > Mdes):
        return "Error: Ventana deslizante mayor a la ventana de entrada."
    
    if(Mdes + Ment > len(string)):
        return "Error: Longitudes de las ventanas deslizante y de entrada mayor que la del texto."
    
    output_string = string[:Mdes]
    
    decoder = Mdes
    
    while(decoder < len(string) - Ment):
        if(string[decoder] == '0'):
            output_string += string[decoder + 1]
            decoder += 2
        else:
            num1 = toDecimal(string[decoder:decoder + e], e - 1)
            if(num1 == 0):
                num1 = 2 ** e
            num2 = toDecimal(string[decoder + e + 1: decoder + e + d + 1], d - 1)
            if(num2 == 0):
                num2 = 2 ** d
            output_string += output_string[len(output_string) - num2: len(output_string) - num2 + num1]
            decoder += 1 + e + d
    output_string += string[decoder:]
    return output_string

#Para pasar números a binario (las funciones bin() y format() no daban el resultado deseado)
def toBinary(i, p):
    b = ""
    while(p >= 0):
        if(i >= 2 ** p):
            b += '1'
            i -= 2 ** p
        else:
            b += '0'
        p -= 1
    return b

#Para volver los números a decimal
def toDecimal(b, p):
    i = 0
    while(p >= 0):
        if(b[0] == '1'):
            i += 2 ** p
        p -= 1
        b = b[1:]
    return i

datos = "1111111100100111"
code = LZ77en(datos, 2, 3)
decode = LZ77de(code, 2, 3)
assert datos == decode
